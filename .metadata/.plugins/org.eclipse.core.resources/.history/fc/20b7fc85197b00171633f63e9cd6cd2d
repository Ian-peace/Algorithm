/*
 * SortTestHelper.h
 *
 *  Created on: Aug 7, 2017
 *      Author: jian
 */

#ifndef SORTTESTHELPER_H_
#define SORTTESTHELPER_H_

#include <iostream>
#include <cassert>
#include <cstdlib>
#include <string>
#include <time.h>

using namespace std;

namespace SortTestHelper{

    // 生成有n个元素的随机数组，每个元素的随机范围为 [langeL, rangeR]
    int * generateRandomArray(int n, int rangeL, int rangeR){

    	assert( rangeL <= rangeR );
    	int *arr = new int [n];
    	srand(time(NULL));
    	for( int i = 0; i < n; i++){
    		arr[i] = rand() % (rangeR - rangeL + 1) + rangeL;
    	}
    	return arr;
    }

    template<typename T>
    void printArray(T arr[], int n){
    	for (int i = 0; i < n; i++)
    		cout << arr[i] << ' ';
    	cout << endl;
    	return;
    }

    template<typename T>
    bool isSorted (T arr[], int n){
    	for (int i = 0; i < n; i++){
    		if(arr[i] > arr[i+1]) return false;
    		cout << "dd" << endl;
    	}
    	return true;
    }

    template<typename T>
    void testSort(string sortName, void(*sort)(T [], int), T arr[], int n){

    	clock_t startTime = clock();
    	sort(arr,n);
    	clock_t endTime = clock();

    	assert( 1 );
    	cout << isSorted(arr, n) << endl;
    	printArray(arr, n);
    	cout << sortName << ":" << double(endTime - startTime) / CLOCKS_PER_SEC << "s" << endl;

    	return;
    }

    template<typename T>
    T * copyArray(T a[], int n){

    	T* arr = new T[n];
    	copy(a, a+n, arr);
    	return arr;
    }
}



#endif /* SORTTESTHELPER_H_ */
